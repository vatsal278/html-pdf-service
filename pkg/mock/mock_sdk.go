// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vatsal278/html-pdf-service/pkg/sdk (interfaces: HtmlToPdfSvcI)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHtmlToPdfSvcI is a mock of HtmlToPdfSvcI interface.
type MockHtmlToPdfSvcI struct {
	ctrl     *gomock.Controller
	recorder *MockHtmlToPdfSvcIMockRecorder
}

// MockHtmlToPdfSvcIMockRecorder is the mock recorder for MockHtmlToPdfSvcI.
type MockHtmlToPdfSvcIMockRecorder struct {
	mock *MockHtmlToPdfSvcI
}

// NewMockHtmlToPdfSvcI creates a new mock instance.
func NewMockHtmlToPdfSvcI(ctrl *gomock.Controller) *MockHtmlToPdfSvcI {
	mock := &MockHtmlToPdfSvcI{ctrl: ctrl}
	mock.recorder = &MockHtmlToPdfSvcIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHtmlToPdfSvcI) EXPECT() *MockHtmlToPdfSvcIMockRecorder {
	return m.recorder
}

// GeneratePdf mocks base method.
func (m *MockHtmlToPdfSvcI) GeneratePdf(arg0 map[string]interface{}, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePdf", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GeneratePdf indicates an expected call of GeneratePdf.
func (mr *MockHtmlToPdfSvcIMockRecorder) GeneratePdf(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePdf", reflect.TypeOf((*MockHtmlToPdfSvcI)(nil).GeneratePdf), arg0, arg1)
}

// Register mocks base method.
func (m *MockHtmlToPdfSvcI) Register(arg0 []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockHtmlToPdfSvcIMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockHtmlToPdfSvcI)(nil).Register), arg0)
}

// Replace mocks base method.
func (m *MockHtmlToPdfSvcI) Replace(arg0 []byte, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replace indicates an expected call of Replace.
func (mr *MockHtmlToPdfSvcIMockRecorder) Replace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockHtmlToPdfSvcI)(nil).Replace), arg0, arg1)
}
