// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vatsal278/html-pdf-service/internal/logic (interfaces: HtmlPdfServiceLogicIer)

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	model "github.com/PereRohit/util/model"
	gomock "github.com/golang/mock/gomock"
	model0 "github.com/vatsal278/html-pdf-service/internal/model"
)

// MockHtmlPdfServiceLogicIer is a mock of HtmlPdfServiceLogicIer interface.
type MockHtmlPdfServiceLogicIer struct {
	ctrl     *gomock.Controller
	recorder *MockHtmlPdfServiceLogicIerMockRecorder
}

// MockHtmlPdfServiceLogicIerMockRecorder is the mock recorder for MockHtmlPdfServiceLogicIer.
type MockHtmlPdfServiceLogicIerMockRecorder struct {
	mock *MockHtmlPdfServiceLogicIer
}

// NewMockHtmlPdfServiceLogicIer creates a new mock instance.
func NewMockHtmlPdfServiceLogicIer(ctrl *gomock.Controller) *MockHtmlPdfServiceLogicIer {
	mock := &MockHtmlPdfServiceLogicIer{ctrl: ctrl}
	mock.recorder = &MockHtmlPdfServiceLogicIerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHtmlPdfServiceLogicIer) EXPECT() *MockHtmlPdfServiceLogicIerMockRecorder {
	return m.recorder
}

// HealthCheck mocks base method.
func (m *MockHtmlPdfServiceLogicIer) HealthCheck() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockHtmlPdfServiceLogicIerMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockHtmlPdfServiceLogicIer)(nil).HealthCheck))
}

// HtmlToPdf mocks base method.
func (m *MockHtmlPdfServiceLogicIer) HtmlToPdf(arg0 io.Writer, arg1 *model0.GenerateReq) *model.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HtmlToPdf", arg0, arg1)
	ret0, _ := ret[0].(*model.Response)
	return ret0
}

// HtmlToPdf indicates an expected call of HtmlToPdf.
func (mr *MockHtmlPdfServiceLogicIerMockRecorder) HtmlToPdf(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HtmlToPdf", reflect.TypeOf((*MockHtmlPdfServiceLogicIer)(nil).HtmlToPdf), arg0, arg1)
}

// Replace mocks base method.
func (m *MockHtmlPdfServiceLogicIer) Replace(arg0 string, arg1 io.Reader) *model.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", arg0, arg1)
	ret0, _ := ret[0].(*model.Response)
	return ret0
}

// Replace indicates an expected call of Replace.
func (mr *MockHtmlPdfServiceLogicIerMockRecorder) Replace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockHtmlPdfServiceLogicIer)(nil).Replace), arg0, arg1)
}

// Upload mocks base method.
func (m *MockHtmlPdfServiceLogicIer) Upload(arg0 io.Reader) *model.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0)
	ret0, _ := ret[0].(*model.Response)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockHtmlPdfServiceLogicIerMockRecorder) Upload(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockHtmlPdfServiceLogicIer)(nil).Upload), arg0)
}
